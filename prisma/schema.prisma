// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN

  @@map("roles")
}

enum Slug {
  PC
  LAPTOP
  PHONE

  @@map("slugs")
}

model User {
  id         Int      @unique @default(autoincrement())
  role       Role     @default(USER)
  username   String   @unique
  email      String   @unique
  hash       String
  hashedRt   String?
  avatarPath String?
  phone      String?  @unique
  orders     Order[]
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  @@map("users")
}

model Service {
  id           Int         @unique @default(autoincrement())
  title        String      @unique
  prices       Int[]
  updatedAt    DateTime    @updatedAt
  createdAt    DateTime    @default(now())
  RepairCard   RepairCard? @relation(fields: [repairCardId], references: [id], onDelete: Cascade)
  repairCardId Int?
  Order        Order[]

  @@map("services")
}

model RepairCard {
  id          Int       @unique @default(autoincrement())
  title       String    @unique
  description String
  iconPath    String?
  services    Service[]
  menus       Menu[]
  slug        Slug      @unique
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())

  @@map("repairCards")
}

model Order {
  id         Int      @unique @default(autoincrement())
  comment    String?
  note       String?
  status     String   @default("PENDING")
  User       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  price      Int?
  priceRange Int[]
  userId     Int?
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId  Int

  @@map("orders")
}

model Menu {
  id           Int         @unique @default(autoincrement())
  title        String
  paragraphs   Paragraph[]
  RepairCard   RepairCard? @relation(fields: [repairCardId], references: [id], onDelete: Cascade)
  repairCardId Int?

  @@map("menus")
}

model Paragraph {
  id     Int    @unique @default(autoincrement())
  title  String
  Menu   Menu?  @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuId Int?

  @@map("paragraphs")
}
